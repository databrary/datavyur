% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to_csv.R
\name{to_csv}
\alias{to_csv}
\title{Convert Extracted Datavyu File To CSV.}
\usage{
to_csv(
  dv_dir = NULL,
  dv_fn = "db",
  out_fn = file.path(dv_dir, "/tmp.csv"),
  auto_write_over = FALSE,
  code_regex = "^([a-zA-Z_]+[0-9]*[a-zA-Z_]*[0-9]*)",
  code_type_regex = "([a-zA-Z]+)$",
  time_regex = "([0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{3})",
  code_values_regex = "\\\\(([a-zA-Z ?,.'/0-9;!|~`]+)\\\\)$",
  convert_times = FALSE,
  vb = FALSE
)
}
\arguments{
\item{dv_dir}{A character string. The directory to extract the Datavyu file.
Default value NULL. This forces the user to specify a directory.}

\item{dv_fn}{A character string. The name of the Datavyu code file.
Defaults to 'db'.}

\item{out_fn}{A character string. The name of the output CSV file. Default
'tmp.csv' in the directory specified by \code{dv_dir}.}

\item{auto_write_over}{A logical value. If TRUE, new output file overwrites
the old. Default is FALSE.}

\item{code_regex}{A character string. A regular expression to extract codes
from a Datavyu file.}

\item{code_type_regex}{A character string. A regular expression to extract
code types from a Datavyu file.}

\item{time_regex}{A character string. A regular expression to extract
onset/offset times from a Datavyu file.}

\item{code_values_regex}{A character string. A regular expression to extract
code values from Datavyu file.}

\item{convert_times}{A logical value. If TRUE (default), converts the onset
and offset fields to lubridate-compatible dates and times. Default is TRUE.}

\item{vb}{A boolean value. If TRUE, provides verbose output. Default is
FALSE.}
}
\description{
Convert Extracted Datavyu File To CSV.
}
\examples{
\donttest{
\dontrun{
sample_dv_fn <- download_opf()
f_path <- extract_opf(sample_dv_fn)
to_csv(f_path)
}
}

}
